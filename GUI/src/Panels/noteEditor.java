/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Composer.Composer;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author ibrahim
 */
public class noteEditor extends javax.swing.JPanel {
    
    JTextField musicNameEditField;
    JTextField composerNameEditField;
    /**
     * Creates new form noteEditor
     */
    public noteEditor() {
        initComponents();
        initComponents2();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HeaderPanel = new javax.swing.JPanel();
        MusicNameLabel = new javax.swing.JLabel();
        composerNameLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        staveContentPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(620, 360));
        setPreferredSize(new java.awt.Dimension(930, 540));
        setLayout(new java.awt.BorderLayout());

        HeaderPanel.setBackground(new java.awt.Color(255, 255, 255));
        HeaderPanel.setMinimumSize(new java.awt.Dimension(620, 60));
        HeaderPanel.setPreferredSize(new java.awt.Dimension(930, 100));
        HeaderPanel.setLayout(new java.awt.BorderLayout());

        MusicNameLabel.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        MusicNameLabel.setForeground(new java.awt.Color(0, 0, 0));
        MusicNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MusicNameLabel.setText("Music Name");
        MusicNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MusicNameLabelMouseClicked(evt);
            }
        });
        HeaderPanel.add(MusicNameLabel, java.awt.BorderLayout.CENTER);

        composerNameLabel.setFont(new java.awt.Font("Times New Roman", 2, 16)); // NOI18N
        composerNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        composerNameLabel.setText("Composer");
        composerNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                composerNameLabelMouseClicked(evt);
            }
        });
        HeaderPanel.add(composerNameLabel, java.awt.BorderLayout.PAGE_END);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel3.setText("ölçü:5/16");
        HeaderPanel.add(jLabel3, java.awt.BorderLayout.LINE_START);

        add(HeaderPanel, java.awt.BorderLayout.PAGE_START);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setMinimumSize(new java.awt.Dimension(620, 360));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(930, 540));

        staveContentPanel.setBackground(new java.awt.Color(200, 255, 255));
        staveContentPanel.setMinimumSize(new java.awt.Dimension(620, 360));
        staveContentPanel.setPreferredSize(new java.awt.Dimension(930, 540));
        staveContentPanel.setLayout(new javax.swing.BoxLayout(staveContentPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane2.setViewportView(staveContentPanel);
        jScrollPane2.setVerticalScrollBar(new customscrollbar.customScrollBar(staveContentPanel.getBackground()));

        add(jScrollPane2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponents2(){
        musicNameEditField=new JTextField();
        musicNameEditField.setFont(this.MusicNameLabel.getFont());
        musicNameEditField.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {

                if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER){
                    
                    HeaderPanel.remove(musicNameEditField); 
                    MusicNameLabel.setText(musicNameEditField.getText());
                    HeaderPanel.add(MusicNameLabel);
                    HeaderPanel.repaint();
                    HeaderPanel.revalidate();
                }
            }
        });
        
        composerNameEditField=new JTextField();
        composerNameEditField.setFont(this.composerNameLabel.getFont());
        composerNameEditField.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {

                if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER){
                    
                    HeaderPanel.remove(composerNameEditField); 
                    composerNameLabel.setText(composerNameEditField.getText());
                    HeaderPanel.add(composerNameLabel,BorderLayout.PAGE_END);
                    HeaderPanel.repaint();
                    HeaderPanel.revalidate();
                }
            }
        });
        
        
    }
    private void MusicNameLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MusicNameLabelMouseClicked
        // TODO add your handling code here:
        //addStave();

        this.musicNameEditField.setText(this.MusicNameLabel.getText());
        
        this.HeaderPanel.remove(this.MusicNameLabel);        
        this.HeaderPanel.add(this.musicNameEditField,BorderLayout.CENTER);
        
        this.HeaderPanel.repaint();
        this.HeaderPanel.revalidate();
    }//GEN-LAST:event_MusicNameLabelMouseClicked

    private void composerNameLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_composerNameLabelMouseClicked
        // TODO add your handling code here:
        this.composerNameEditField.setText(this.composerNameLabel.getText());
        
        this.HeaderPanel.remove(this.composerNameLabel);        
        this.HeaderPanel.add(this.composerNameEditField,BorderLayout.PAGE_END);
        
        this.HeaderPanel.repaint();
        this.HeaderPanel.revalidate();
    }//GEN-LAST:event_composerNameLabelMouseClicked

    public void addStave(){
        stavePanel sp=new stavePanel();
        sp.setMaximumSize(sp.getPreferredSize());
        this.staveContentPanel.add(sp);
        //sp=null;
        repaint();
        revalidate();
    }
    public void writeToFile2(){
        int choice=JOptionPane.YES_OPTION;
        File musicName=new File(this.MusicNameLabel.getText());
        
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        
        fileChooser.setCurrentDirectory(new File( this.getClass().getClassLoader().getResource("").getPath() ));
        
        fileChooser.setSelectedFile(musicName);
        
        if (fileChooser.showSaveDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = fileChooser.getSelectedFile();
            String ext=fileChooser.getFileFilter().getDescription();
            
            if (new File(file.getAbsolutePath()+".txt").exists()) {
                
                choice=JOptionPane.showConfirmDialog(this,
                    file.getName()+" exists."
                    + "\nOverWrite it's contents?",
                    "Overwrite text file?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.INFORMATION_MESSAGE);
                
            }
            musicName=file;
            
        }
        if (choice==JOptionPane.YES_OPTION) {
            
        
        //write a txt file
        Composer txtFile;
        txtFile=new Composer(musicName.getAbsolutePath());

        for(Component cp:this.staveContentPanel.getComponents()){

            stavePanel sp=(stavePanel)cp;

            for (int i = 0; i < sp.noteList.length; i++) {

                txtFile.writeln( sp.noteList[i].getTone() );
            }
        }
        txtFile.close();
        
        }
        
    }
    public void writeToFile(){
        
        //write a txt file
        Composer txtFile;
        int choice=0;
        
        if (new File(this.MusicNameLabel.getText()+".txt").exists()) {
        
            choice=JOptionPane.showConfirmDialog(this,
                    this.MusicNameLabel.getText()+" exists."
                    + "\nOverWrite it's contents?",
                    "Overwrite text file?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.INFORMATION_MESSAGE);
        }else{
            choice=JOptionPane.YES_OPTION;
        }
        
        if (choice==JOptionPane.YES_OPTION) {
            if (this.staveContentPanel.getComponentCount()<=0) {
                JOptionPane.showMessageDialog(this,
                        "There is no stave contents\n or anything to save!!",
                         "No content to Save",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
            txtFile=new Composer(this.MusicNameLabel.getText());
            
            for(Component cp:this.staveContentPanel.getComponents()){

                stavePanel sp=(stavePanel)cp;

                for (int i = 0; i < sp.noteList.length; i++) {

                    txtFile.writeln( sp.noteList[i].getTone() );
                }
            }
            txtFile.close();
        }
    }
    
    
    public void ComposeFromFile(){
        
        File musicInputFile=new File(this.MusicNameLabel.getText()+".txt");
        File musicFile=new File(this.MusicNameLabel.getText()+".wav");
        int choice;
        
        if (musicInputFile.exists()) {
            if (musicFile.exists()) {
                
            
                choice=JOptionPane.showConfirmDialog(this,
                        musicFile.getName()+" exists."
                        + "\nOverWrite it's contents?",
                        "Overwrite music file?",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.INFORMATION_MESSAGE);

                if (choice==JOptionPane.YES_OPTION) {
                    Composer txtFile=new Composer(this.MusicNameLabel.getText(),true);
                    this.ComposeFromFile(txtFile,musicFile.getName());
                }
            
            }else{
                    Composer txtFile=new Composer(this.MusicNameLabel.getText(),true);
                    this.ComposeFromFile(txtFile,musicFile.getName());    
            }
    }else{
            JOptionPane.showMessageDialog(this,
                                "No source file found to generate music\n"+
                            musicInputFile.getName()+" do not exists!.",
                            "No text file to process!!",
                            JOptionPane.WARNING_MESSAGE);
        }
    }
    private void ComposeFromFile(Composer c,String musicName){
        //open music.txt file to compose
        
        
        Runtime rt=Runtime.getRuntime();
        
        try {
            Process p=rt.exec("/home/ibrahim/Desktop/TLauncher-2.83/kırmançee/simple-sound-generator/sound_generator/bin/generator -i "
                    +c.getPath()+" -o "+musicName);
            java.io.BufferedReader br=new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));
            
            
            String l;
            System.out.println("Run sound_generator.cpp program\n-------------------------");
            while( (l=br.readLine())!=null  ){
                System.out.println(l);
            }System.out.println("-------------------------");
        
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,ex.getMessage(),
                    "generator exec errror",
                    JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel HeaderPanel;
    private javax.swing.JLabel MusicNameLabel;
    private javax.swing.JLabel composerNameLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel staveContentPanel;
    // End of variables declaration//GEN-END:variables
}
