/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.lang.reflect.Array;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import soundgeneratorgui.MusicNote;
import soundgeneratorgui.imageUtils;


/**
 *
 * @author ibrahim
 */
public class stavePanel extends javax.swing.JPanel {
    int NOTE_ON_A_ROW;
    int NOTE_ON_A_COL;
    MusicNote[] noteList;
    Point DRAW_ROW_COL;
    int[] snapArea;
    /**
     * Creates new form stavePanel
     */
    public stavePanel() {
        initComponents();
        NOTE_ON_A_ROW=36;
        NOTE_ON_A_COL=11;
        DRAW_ROW_COL=new Point(0,0); //x:order of note, y:tone of note
        
        this.noteList=new MusicNote[NOTE_ON_A_ROW];
        this.noteList[2]=new MusicNote();
        
        snapArea=new int[4];
        
        for (int i = 0; i < noteList.length; i++) {
            noteList[i]=new MusicNote();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        setMinimumSize(new java.awt.Dimension(616, 60));
        setPreferredSize(new java.awt.Dimension(920, 91));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(254, 254, 254));
        jButton1.setToolTipText("Delete stave");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        ImageIcon trashIcon=new javax.swing.ImageIcon(getClass().getResource("/Images/trash-icon.png"));
        trashIcon=imageUtils.resize(trashIcon, jButton1.getPreferredSize());
        jButton1.setIcon(trashIcon);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 898, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        //this.drawSnapArea(evt.getPoint());
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        //this.drawSnapArea(evt.getPoint());
    }//GEN-LAST:event_formMouseDragged

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
        this.drawSnapArea(evt.getPoint());
    }//GEN-LAST:event_formMouseMoved

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        int buttonNum=evt.getButton();
        switch(buttonNum){
            case 1:this.insertNote();break;
            case 3:this.DeleteNote();break;
            default:break;
        }
    }//GEN-LAST:event_formMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        JPanel p = (JPanel) this.getParent();
        p.remove(this);
        p.repaint();
        p.revalidate();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    public void drawSnapArea(Point mousePos){

        Dimension panelDimension=this.getPreferredSize();
        int width=(int)panelDimension.getWidth();
        int height=(int)panelDimension.getHeight();
        
        Graphics2D pen=(Graphics2D)this.getGraphics();

        pen.setColor(Color.red);
        
        int XSnapOffset=width/NOTE_ON_A_ROW;
        int YSnapOffset=height/NOTE_ON_A_COL;
        
        int drawX=mousePos.x/XSnapOffset;
        DRAW_ROW_COL.x=drawX;
        drawX*=XSnapOffset;
        
        int drawY=mousePos.y/YSnapOffset;
        DRAW_ROW_COL.y=drawY;
        drawY*=YSnapOffset;

                
        if (  snapArea[0]!=drawX || snapArea[1]!=drawY ) {
            // The square is moving, repaint background 
            // over the old square location. 
            repaint(snapArea[0], snapArea[1], snapArea[2]+1, snapArea[3]+1);

            // Update coordinates.
            snapArea=new int[]{drawX,drawY,XSnapOffset,YSnapOffset};

        }
        // Repaint the square at the new location.
        pen.drawRect(drawX, drawY, XSnapOffset, YSnapOffset);
            
        
    }
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        
        Graphics2D pen=(Graphics2D)g;
        
        Dimension panelDimension=this.getPreferredSize();
        int width=(int)panelDimension.getWidth();
        int height=(int)panelDimension.getHeight();
        panelDimension=null;
        
        //draw stave lines
        for (int i = 1; i < 6; i++) {
            
            pen.drawLine(0, height*i/(NOTE_ON_A_COL/2), width, height*i/(NOTE_ON_A_COL/2));
        }
        
        drawNotes(g);//draw coordinates on noteList
    }
    
    private void insertNote(){
        
        MusicNote n=new MusicNote(snapArea[0], snapArea[1], snapArea[2], snapArea[3]);
        
        int clean_h=(int)this.getPreferredSize().getHeight();
        
        repaint(snapArea[0], 0, snapArea[2]+1, clean_h+1);
        
        n.setTone(DRAW_ROW_COL.y);
        noteList[DRAW_ROW_COL.x]=n;
        
    }
    private void DeleteNote(){
        
        MusicNote n=new MusicNote(0,0,0,0);
        
        int clean_h=(int)this.getPreferredSize().getHeight();
        
        repaint(snapArea[0], 0, snapArea[2]+1, clean_h+1);
        
        noteList[DRAW_ROW_COL.x]=n;
        
    }
    private void drawNotes(Graphics g){
        for (int i = 0; i < this.noteList.length; i++) {
            
            if (this.noteList[i].tone==-1) {
                continue;
            }
            this.noteList[i].paintNote(g);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
